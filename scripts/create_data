#!/usr/bin/env python

# Copyright (C) 2010-2011 Association of Universities for Research in Astronomy (AURA)

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#     1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.

#     2. Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.

#     3. The name of AURA and its representatives may not be used to
#       endorse or promote products derived from this software without
#       specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY AURA ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL AURA BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.

# STDLIB
import sys
import argparse
import warnings

# LOCAL
from jwst import fits_generator
from jwst.fits_generator import create_data

if __name__ == '__main__':

    # bug: figure out how to get argparse to do this
    if '--version' in sys.argv:
        sys.stdout.write("%s\n" % fits_generator.__version__)
        sys.exit(0)

    parser = argparse.ArgumentParser(
        """Creates Level 1b data from a set of raw FITSWriter files""")
    parser.add_argument(
        'directory', nargs=1,
        help="""A list of directories containing proposal files
        to be processed.""")
    parser.add_argument('-l', '--level', dest='level',
                        nargs=1, default='1b', choices=('1b', '2a'),
                        help="Level of data to produce: default='1b'")

    args = parser.parse_args()

#    print(args.level)
    create_data.run(base_directory=args.directory[0], level=args.level)
