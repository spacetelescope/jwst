name: CI

on:
  push:
    branches:
      - master
      - '*x'
    tags:
      - '*'
  pull_request:
    branches:
      - master
  schedule:
    # Weekly Monday 9AM build
    - cron: "0 9 * * 1"

env:
  CRDS_SERVER_URL: https://jwst-crds.stsci.edu
  CRDS_PATH: $HOME/crds_cache
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20

jobs:
  check:
    name: ${{ matrix.toxenv }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ check-style, check-security, check-dependencies, build-dist ]
        python-version: [ '3.x' ]
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'setup.cfg'
      - run: pip install tox
      - run: tox -e ${{ matrix.toxenv }}
  cache_crds:
    name: cache CRDS files
    runs-on: ubuntu-latest
    outputs:
      crds-context: ${{ steps.crds-context.outputs.pmap }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip install crds
      - run: echo "pmap=$(crds list --operational-context)" >> $GITHUB_OUTPUT
        id: crds-context
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ steps.crds-context.outputs.pmap }}
      - run: crds sync --contexts ${{ steps.crds-context.outputs.pmap }}
        if: ${{ steps.crds-context.outputs.pmap != '' }}
  test:
    name: ${{ matrix.toxenv }} (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [ cache_crds ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ test-xdist ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
        os: [ ubuntu-latest, macos-latest ]
        include:
          - toxenv: test-cov-xdist
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: test-pyargs-xdist
            os: ubuntu-latest
            python-version: '3.11'
          - toxenv: test-sdpdeps-xdist
            os: ubuntu-latest
            python-version: '3.9'
          - toxenv: test-oldestdeps-xdist-cov
            os: ubuntu-latest
            python-version: '3.8'
          - toxenv: test-opencv-xdist
            os: ubuntu-latest
            python-version: '3.10'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'setup.cfg'
      - run: pip install tox
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}
          key: crds-${{ needs.cache_crds.outputs.crds-context }}
      - run: tox -e ${{ matrix.toxenv }}
      - if: ${{ contains(matrix.toxenv, '-cov') }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unit
          fail_ci_if_error: true
