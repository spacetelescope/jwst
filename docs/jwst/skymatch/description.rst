Description
===========

Overview
--------
The ``skymatch`` step can be used to compute sky values in a collection of input
images that contain both sky and source signal. The sky values can be computed
for each image separately or in a way that matches the sky levels amongst the
collection of images so as to minimize their differences. This operation is
typically applied before combining multiple images into a mosaic. When running
the ``skymatch`` step in a matching mode, it compares *total* signal levels
in *the overlap regions* (instead of doing this comparison on a per-pixel basis)
of a set of input images and computes the signal offsets for each image that will
minimize -- in a least squares sense -- the residuals across the entire set.
This comparison is performed directly on the input images without resampling
them onto a common grid. The overlap regions are computed directly on the sky
(celestial sphere) for each pair of input images. By default the sky value
computed for each image is recorded, but not actually subtracted from the
images. Also note that the meaning of "sky background" depends on the chosen
sky computation method.

Assumptions
-----------
When matching sky background, the code needs to compute bounding polygon
intersections in world coordinates. The input images, therefore, need to have
a valid WCS, generated by the :ref:`assign_wcs <assign_wcs_step>` step.

Algorithm
---------
The ``skymatch`` step provides several methods for constant sky background
value computations.

The first method, called "local", essentially is an enhanced version of the
original sky subtraction method used in older versions of
`astrodrizzle <https://drizzlepac.readthedocs.io/en/latest/astrodrizzle.html>`_.
This method simply computes the mean/median/mode/etc. value of the "sky" separately
in each input image. This method was upgraded to be able to use DQ flags
to remove bad pixels from being used in computations of the sky statistics.

In addition to the classic "local" method,
two other methods have been introduced: "global" and
"match", as well as a combination of the two -- "global+match".

- The "global" method computes a single sky value across *all*
  input images. The resulting *single sky value* is then considered to be
  the background in *all input images*. The global value is always based on
  the image with the lowest sky signal level.

- The "match" algorithm computes a correction value for each image, such
  that, when applied to each image, the mismatch between *all* pairs of images
  is minimized, in the least squares sense. For each pair of images, the sky 
  mismatch is computed *only* in the regions in which the two images overlap
  on the sky.

  This makes the "match" algorithm particularly useful
  for equalizing sky values in large mosaics in which one may have
  only pair-wise intersection of adjacent images without having
  a common intersection region (on the sky) in all images.

  Note that if the argument "match_down=True", matching will be done to the image
  with the lowest sky value, and if "match_down=False" it will be done to the
  image with the highest value.

- The "global+match" algorithm combines the "global" and "match" methods.
  It uses the "global" algorithm to find a baseline sky value common to all
  input images and the "match" algorithm to equalize sky values among images.
  The direction of matching (to the lowest or highest) is again controlled by
  the "match_down" argument.

The table below shows examples of the sky computation results for the various methods
described above, for a set of 6 input images, each with different
sky signal levels. The first column gives the actual sky values imposed into
the images, with the subsequent columns showing the results from each method.

+-------+-------+--------+-------+-------+--------------+
| Image | Local | Global | Match | Match | Global+Match |
|       |       |        |       |       |              |
| Value |       |        | Down  | Up    | Down         |
+=======+=======+========+=======+=======+==============+
| 200   |  200  |  200   |    0  |  -300 |        200   |
+-------+-------+--------+-------+-------+--------------+
| 300   |  300  |  200   |  100  |  -200 |        300   |
+-------+-------+--------+-------+-------+--------------+
| 350   |  350  |  200   |  150  |  -150 |        350   |
+-------+-------+--------+-------+-------+--------------+
| 400   |  400  |  200   |  200  |  -100 |        400   |
+-------+-------+--------+-------+-------+--------------+
| 500   |  500  |  200   |  300  |     0 |        500   |
+-------+-------+--------+-------+-------+--------------+
| 370   |  370  |  200   |  170  |  -130 |        370   |
+-------+-------+--------+-------+-------+--------------+

- "local" just finds the sky level of each image independently of the rest.
- "global" finds the minimum sky level amongst all images.
- "match" with "match_down=True" finds the offset needed to match all images
  to the level of the image with the lowest sky level.
- "match" with "match_down=False" finds the offset needed to match all images
  to the level of the image with the highest sky level.
- "global+match" with "match_down=True" finds the offsets and global value
  needed to set all images to a sky level of zero.

In methods that find sky background levels in each image ("local") or
a single level for all images ("global"), image statistics are usually
computed using sigma clipping. If the input images contain vast swaths of empty
sky, then the sigma clipping algorithm should be able to automatically
exclude (clip) contributions from bright compact sources.
In this case the measured sky background is the
measured signal level from the empty sky regions. On the other hand, the
"match" method compares the *total* signal levels integrated over the regions
in the images that correspond to common (overlap) regions on the celestial
sphere for both images being compared (comparison is pair-wise).
This method is often used when there are no large
empty sky regions in the images, such as when a diffuse extended source occupies
most of the view. This method cannot measure true background, but
rather additive corrections that need to be applied to the input images so that
the total signal from the same part of the sky is equal in all images.

The computed sky value for each image is stored in the BKGLEVEL keyword of the
output data products. The BKGSUB keyword (boolean) is also populated to indicate
whether or not the sky/background levels have actually been subtracted from the
images.

Step Arguments
--------------
The ``skymatch`` step has the following optional arguments:

**General sky matching parameters:**

``skymethod`` (str, default='match')
  The sky computation algorithm to be used.
  Allowed values: `local`, `global`, `match`, `global+match`

``match_down`` (boolean, default=True)
  Specifies whether the sky *differences* should be subtracted from images with
  higher sky values (``match_down`` = `True`) in order to match the image with the
  lowest sky, or sky differences should be added to the images with lower sky
  values to match the sky of the image with the highest sky value
  (``match_down`` = `False`). **NOTE**: this argument only applies when
  ``skymethod`` is either `match` or `global+match`.

``subtract`` (boolean, default=False)
  Specifies whether the computed sky background values are to be subtracted from
  the images. The BKGSUB keyword (boolean) will be set in each output image to
  record whether or not the background was subtracted.

**Image bounding polygon parameters:**

``stepsize`` (int, default=None)
  Spacing between vertices of the images bounding polygon. The default value of
  `None` creates bounding polygons with four vertices corresponding to the corners
  of the image.

**Sky statistics parameters:**

``skystat`` (str, default='mode')
  Statistic to be used for sky background
  computations. Supported values are 'mean', 'mode', 'midpt',
  and 'median'.

``dqbits`` (str, default='0')
  The DQ bit values from the input images' DQ arrays that
  should be considered "good" when building masks for sky computations. See
  DQ flag :ref:`dq_parameter_specification` for details.

``lower`` (float, default=None)
  An optional value indicating the lower limit of usable pixel
  values for computing the sky. This value should be specified in the units
  of the input images.

``upper`` (float, default=None)
  An optional value indicating the upper limit of usable pixel
  values for computing the sky. This value should be specified in the units
  of the input images.

``nclip`` (int, default=5)
  The number of clipping iterations to use when computing sky values.

``lsig`` (float, default=4.0)
  Lower clipping limit, in sigma, used when computing the sky value.

``usig`` (float, default=4.0)
  Upper clipping limit, in sigma, used when computing the sky value.

``binwidth`` (float, default=0.1)
  Bin width, in sigma, used to sample the distribution of pixel
  values in order to compute the sky background using statistics
  that require binning, such as `mode` and `midpt`.


Limitations and Discussions
---------------------------
The primary reason for introducing the ``skymatch`` algorithm was to try to
equalize the sky in large mosaics in which computation of the
absolute sky is difficult, due to the presence of large diffuse
sources in the image. As discussed above, the ``skymatch`` step
accomplishes this by comparing the sky values in the
overlap regions of each image pair. The quality of sky matching will
obviously depend on how well these sky values can be estimated.
True background may not be present at all in some images, in which case
the computed "sky" may be the surface brightness of a large galaxy, nebula, etc.

Here is a brief list of possible limitations and factors that can affect
the outcome of the matching (sky subtraction in general) algorithm:

- Because sky computation is performed on *flat-fielded* but
  *not distortion corrected* images, it is important to keep in mind
  that flat-fielding is performed to obtain correct surface brightnesses.
  Because the surface brightness of a pixel containing a point-like source will
  change inversely with a change to the pixel area, it is advisable to
  mask point-like sources through user-supplied mask files. Values
  different from zero in user-supplied masks indicate good data pixels.
  Alternatively, one can use the ``upper`` parameter to exclude the use of
  pixels containing bright objects when performing the sky computations.

- The input images may contain cosmic rays. This
  algorithm does not perform CR cleaning. A possible way of minimizing
  the effect of the cosmic rays on sky computations is to use
  clipping (\ ``nclip`` > 0) and/or set the ``upper`` parameter to a value
  larger than most of the sky background (or extended sources) but
  lower than the values of most CR-affected pixels.

- In general, clipping is a good way of eliminating bad pixels:
  pixels affected by CR, hot/dead pixels, etc. However, for
  images with complicated backgrounds (extended galaxies, nebulae,
  etc.), affected by CR and noise, the clipping process may mask different
  pixels in different images. If variations in the background are
  too strong, clipping may converge to different sky values in
  different images even when factoring in the true difference
  in the sky background between the two images.

- In general images can have different true background values
  (we could measure it if images were not affected by large diffuse
  sources). However, arguments such as ``lower`` and ``upper`` will
  apply to all images regardless of the intrinsic differences
  in sky levels.

Reference Files
===============
This step does not require any reference files.
