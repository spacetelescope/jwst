[tox]
envlist =
    check-{style,security,dependencies,build}
    test{,-oldestdeps,-devdeps,-sdpdeps}{,-pyargs,-warnings,-regtests,-cov}
    build-docs
isolated_build = true

# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#

[testenv:check-style]
description = check code style, e.g. with flake8
skip_install = true
deps =
    ruff
commands =
    ruff . {posargs}

[testenv:check-security]
description = run bandit to check security compliance
skip_install = true
deps =
    bandit>=1.7
commands =
    bandit -r -ll -x jwst/*test*,jwst/**/*test*,jwst/fits_generator jwst

[testenv:check-dependencies]
description = verify that install_requires in setup.cfg has correct dependencies
# `extras` needs to be empty to check modules without additional dependencies
extras =
deps =
    pytest
commands =
    verify_install_requires

[testenv:check-build]
description = check build sdist/wheel and a strict twine check for metadata
skip_install = true
deps =
    twine>=3.3
    build
commands =
    python -m build .
    twine check --strict dist/*

[testenv]
description =
    run tests
    opencv: requiring opencv-python
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    sdpdeps: with the recent STScI DMS release pinned dependencies
    pyargs: with --pyargs on installed package
    warnings: treating warnings as errors
    regtests: with --bigdata and --slow flags
    cov: with coverage
    xdist: using parallel processing
# The following indicates which extras_require from setup.cfg will be installed
extras = test
# Pass through the following environment variables which may be needed for the CI
passenv =
    TOXENV
    CI
    CODECOV_*
    HOME
    CRDS_*
    STRICT_VALIDATION
    PASS_INVALID_VALUES
    VALIDATE_ON_ASSIGNMENT
    TEST_BIGDATA
usedevelop =
    pyargs: false
    !pyargs: true
commands =
    pip freeze
    pytest \
    cov: --cov=. --cov-config=setup.cfg --cov-report=xml \
    warnings: -W error \
    regtests: --bigdata --slow --basetemp={homedir}/test_outputs \
    xdist: -n auto \
    pyargs: {toxinidir}/docs --pyargs jwst \
    opencv: -- jwst/jump/tests/test_jump_step.py \
    {posargs}
deps =
    xdist: pytest-xdist
    devdeps: -rrequirements-dev.txt
    sdpdeps: -rrequirements-sdp.txt
    opencv: opencv-python
setenv =
    sdpdeps,regtests: CRDS_CONTEXT = jwst-edit
commands_pre =
    python -m pip install --upgrade pip
# Generate a requirements-min.txt file
    oldestdeps: minimum_deps
# Force install everything in that file
    oldestdeps: pip install --ignore-installed -r requirements-min.txt
# Don't treat positional arguments passed to tox as file system paths
args_are_paths =
    !pyargs: false
changedir =
    pyargs: {homedir}

[testenv:build-docs]
description = invoke sphinx-build to build the HTML docs
extras = docs
commands =
    sphinx-build -W docs docs/_build
