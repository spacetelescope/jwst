[tox]
envlist =
    py{37,38,39}{,-oldestdeps,-devdeps,-sdpdeps}{,-pyargs}{,-cov}
    style
    security
isolated_build = true

[testenv]
# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#
description =
    run tests
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    sdpdeps: with the recent STScI DMS release pinned dependencies
    pyargs: with --pyargs on installed package
    cov: and test coverage

# The following indicates which extras_require from setup.cfg will be installed
extras = test

# Pass through the following environment variables which may be needed for the CI
passenv =
    TOXENV
    CI
    CODECOV_*
    HOME
    CRDS_*
    STRICT_VALIDATION
    PASS_INVALID_VALUES
    VALIDATE_ON_ASSIGNMENT
    TEST_BIGDATA

usedevelop = true

commands =
    !cov: pytest {posargs}
    cov: pytest --cov-report=xml --cov=. --cov-config=setup.cfg {posargs}

deps =
    devdeps: -rrequirements-dev.txt
    sdpdeps: -rrequirements-sdp.txt

setenv =
    sdpdeps,regtests: CRDS_CONTEXT = jwst-edit

# Don't treat positional arguments passed to tox as file system paths
args_are_paths = false

[testenv:oldestdeps]
install_command = python -m pip install --no-deps {packages}
commands_pre =
    # Generate a requirements-min.txt file
    minimum_deps
    pip install -r requirements-min.txt

[testenv:pyargs]
changedir = {homedir}
usedevelop = false
commands =
    pyargs: pytest {toxinidir}/docs --pyargs {posargs:jwst}

[testenv:regtests]
description = run tests with --bigdata and --slow flags
commands =
    pytest --bigdata --slow --basetemp={homedir}/scratch {posargs}

[testenv:twine]
description = check that the package builds sdist/wheel and that twine uploads
deps =
    twine>=3.3
    pep517
usedevelop = false
commands =
    python -m pep517.check .
    twine check --strict {distdir}/*

[testenv:style]
description = check code style, e.g. with flake8
skip_install = true
deps =
    flake8
commands =
    flake8 {posargs}

[testenv:verify-install-requires]
description = verify that install_requires in setup.cfg is correct
extras =
commands =
    verify_install_requires

[testenv:warnings]
commands =
    pytest -W error {posargs}

[testenv:security]
description = run bandit to check security compliance
deps =
    bandit>=1.7
commands =
    bandit -r -ll -x jwst/*test*,jwst/**/*test*,jwst/fits_generator jwst scripts

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
extras = docs
commands =
    sphinx-build -W docs docs/_build
